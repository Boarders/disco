let swap : forall a. a * a -> a * a = \p. <snd p, fst p> in swap <1,2>
let swap : forall a. a * a -> a * a = \p. <snd p, fst p> in swap <1,2>
let swap : forall a. a * a -> a * a = \p. <snd p, fst p> in swap <1,2>
let swap : forall a. a * a -> a * a = \p. <snd p, fst p> in swap <1,2>
let swap : forall a. a * a -> a * a = \p. <snd p, fst p> in swap <1,2>
let swap : forall a. a * a -> a * a = \p. <snd p, fst p> in swap <1,2>
let x = 3 in <x,<x,<x,x-1>>>
let x = 3 in <x,<x,<x,x>>>
<1,<1,<1,<1,<1,<1,<1,<1,<1,1>>>>>>>>>
<3, (\x. x) : N -> N>
(\x. fst x) : N * B -> N
(\x.x) : N -> N
\x. (x : N)
\x:N.x
<<1, <2,3>>, 4>
<<1, <2,3>>, 4>
<<1, <2,3>>, 4>
<1, <2,3>, 4>
<1, <2,3>>
<<3,4> + <7,5>, 6> + snd <false, <<2,2>, fst <3,4>>>
fst <snd, fst>
<snd, fst>
fst <snd, fst> <3,5> + 1
fst <snd, fst> <3,5> + 1
fst <snd, fst> <3,5> + 1
fst <snd, fst> <3,5> + 1
let f : forall a. (a -> a) -> a -> a = \g. \x. g (g x) in f (\x.3) 5
let f : forall a. (a -> a) -> a -> a = \g. \x. g (g 3) in f (\x.3) 5
let x = 3 in let y = 4 in let z = 6 in fst (<x,y> + <z,z> - <z,x>) * 5
let x = 3 in x + x - x
<2,true> * <8 - 3, 6>
<2,true> * <8 - 3,false>
<2,true> * <8 - 3,false>
<2,true> * <8 - 3,false>
<2,true> * <8 - 3,false>
let x = 3 in let y = 5 in let z = x + y in z
let x = 3, y = x in x + y
3+4+5+6
3+4-5
false * false
false - 6
5 + false
3+4-5 * 8
3+4-5
3+4-5
3+4-5
3+4
3+4
3+4
3+4
3 + 4
3+4
3 + 4
<2,true> * <8 - 3,false>
<2,true> * <8 - 3,false>
2 + 3
<2,true> * <8 - 3,false>
<2,true> * <8,3>
<2,true> * <8,false>
<2,true> * <8,false>
<2,true> * <8,false>
<2,3> * <4,5>
let x = 3 in x + x - x
let x = 3 in let y = 4 in let z = 6 in fst (<x,y> + <z,z> - <z,x>) * 5
let x = 3 in let y = 4 in let z = 6 in 3 * <x,y> + <z,z> - <z,x>
let x = 3 in let y = 4 in let z = 6 in <x,y> + <z,z> - <z,x>
let x = 3 in let y = 4 in let z = 6 in <x,y> + <z,z> - <z,<x,x>>
let x = 3 in let y = 4 in let z = 6 in <x,y> + <z,z> - z
let x = 3 in let y = 4 in let z = 6 in <x,y> + <z,z> - <z,z>
let x = 3 in let y = 4 in let z = 6 in <x,y> + <z,z>
let x = 3 in let y = 4 in let z = 6 in <x,y> + z
let x = 3 in let y = 4 in let z = 6 in fst <x,y> + z
let x = 3 in let y = 4 in let z = 6 in (x + y) - z
let f : forall a. (a -> a) -> a -> a = \g. \x. g (g 3) in f (\x.3) 5
let f : forall a. (a -> a) -> a -> a = \g. \x. g (g x) in f (\x.3) 5
let f : forall a. (a -> a) -> a -> a = \g. \x. g (g x) in f (\x.x+3) 5
<2,<3,1>> + <4 - 3,<5,7>>
<2,<3,1>> + <4,<5,7>>
<2,3> + <4,5>
fst <snd, fst> <3,5> + 1
fst <snd, fst> <3,5>
3 + fst <4,5>
3 + fst (4,5)
3 + 4
3 + 4
3 + 4
fst <snd, fst> <3,5>
fst + snd
fst <3,4>
fst <3,4>
fst
fst
fst
fst
<3,4>
<2,5 + fst (fst <3,2>)>
<2,5 + fst <3,2>>
<2,5 + fst <3,2>>
<2,3+6>
<2,3>
