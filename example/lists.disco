foldr : (N -> Q -> Q) -> Q -> [N] -> Q;
foldr f z l =
  { z                   when l = []
  { f x (foldr f z xs)  when l = x::xs;

append : [N] * [N] -> [N];
append (xs, ys) =
  { ys                   when xs = []
  { x :: append(xs',ys)  when xs = x :: xs'

