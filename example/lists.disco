||| The eliminator for lists of natural numbers with a rational result.

!!!   foldr (x -> y -> x + y) 0 [1,2,3]
!!!     = 6
!!!
!!!   foldr (x -> y -> x + y) 0 [] = 0

foldr : (ℕ → ℚ → ℚ) → ℚ → List ℕ → ℚ
foldr f z l =
  { z                   when l is []
  { f x (foldr f z xs)  when l is x::xs

||| Append two lists into a single list.

!!!   append ([], [])          = ([] : List N)
!!!   append ([1,2,3],[])      = [1,2,3]
!!!   append ([1,2,3],[4,5,6]) = [1,2,3,4,5,6]

append : List ℕ × List ℕ → List ℕ
append (xs, ys) =
  { ys                   when xs is []
  { x :: append(xs',ys)  when xs is x :: xs'

||| Flatten a list of lists into a single list.

!!!   concat [[1,2],[3],[],[4,5,6]] = [1,2,3,4,5,6]

concat : List List ℕ → List ℕ
concat lls =
  { []                    when lls is []
  { append(l, concat ls)  when lls is (l :: ls)

map : (ℤ → Bool) → List ℤ → List Bool
map f l =
  { []               when l is []
  { f x :: map f xs  when l is x :: xs

||| Take the first n elements of a list.
!!!   take 1 [true, false, true] = [true]
!!!   take 3 [true, false] = [true, false]
!!!   take 0 [true, false] = ([] : List Bool)

take : ℕ → List Bool → List Bool
take n l =
  { []               when n is 0
  { []               when l is []

  { x :: take n' xs  when l is x::xs
                     when n is S n'

||| Repeat the given element infinitely.
!!!   take 3 (repeat true) = [true, true, true]
repeat : Bool → List Bool
repeat x = x :: repeat x