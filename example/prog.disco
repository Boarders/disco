f : (N -> N) -> N * N -> N -> Z;
f g (x,y) z = x + g y - z;   -- here g y is function application

q : N -> N * N -> N -> Z;
q g (x,y) z = x + g y - z;    -- here g y is multiplication

fib : N -> N;                 -- a top-level recursive function
fib n =
  { n                  when n = 0
  { n                  when n = 1
  { fib m + fib (m+1)  when n = S (S m);

-- Mutually recursive functions.  The order of declarations and
-- definitions does not matter.
isEven : N -> Bool;
isOdd  : N -> Bool;

isEven n = { true       when n = 0
           { isOdd n'   when n = S n';

isOdd  n = { false      when n = 0
           { isEven n'  when n = S n';

fact : N -> N;
fact n =
  { 1   when n = 0
  { n * fact m   when n = S m;

fact2 : N -> N;
fact2 = n ->
  { 1 when n = 0
  { n * fact m  when n = S m