type Wahoo = Nat

type Apple = Apple

type Cat = Corn

type Corn = Rain

type Rain = Groot

type Bat = Nat

map : Wahoo -> Wahoo
map w = w + 1

type Triplet = (Nat * Nat * Nat)

sumTriplet : Triplet -> Nat
sumTriplet (root, l, r) = root + l + r

type Tree = Nat + (Nat * Tree * Tree)

sumTree : Tree -> Nat
sumTree (left n) = n
sumTree (right (n, l, r)) = n + (sumTree l) + (sumTree r)

type Stream = N * N * Stream

unconsStream : Stream -> N * Stream
unconsStream s = s

streamy : N * N * N * Stream -> N * N * Stream
streamy s = s

streamy2 : Stream -> Stream
streamy2 (n,s) = (n+1,n+1,s)

type Lst = Unit + N * Lst

nats : Stream
nats = natsFrom 0

natsFrom : N -> Stream
natsFrom n = (n, natsFrom (n+1))

addStreams : Stream -> Stream -> Stream
addStreams (a,s) (b,t) = (a+b, addStreams s t)

takeStream : N -> Stream -> Lst
takeStream 0     _     = left ()
takeStream (S n) (x,s) = right (x, takeStream n s)
