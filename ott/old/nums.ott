metavar termvar, x ::=
  {{ tex \mathit{[[termvar]]} }} {{ com  term variable  }}

metavar natural, n ::=
  {{ tex \mathit{[[natural]]} }} {{ com  natural number }}

grammar
  t, T :: 't_' ::=                                      {{ com term }}
    | x                   ::   :: Var                     {{ com variable }}
    | n                   ::   :: Nat                     {{ com natural literal }}
    | x |-> t             ::   :: Lam  (+ bind x in t +)  {{ com abstraction }}
    | t t'                ::   :: App                     {{ com application }}
    | t + t'              ::   :: Add                     {{ com addition }}
    | t - t'              ::   :: Sub                     {{ com subtraction }}
    | t * t'              ::   :: Mul                     {{ com multiplication }}
    | t / t'              ::   :: Div                     {{ com division }}
    | N                   ::   :: nat                     {{ com natural number type }}
    | Z                   ::   :: int                     {{ com integer type }}
    | Q                   ::   :: rat                     {{ com rational number type }}
    | t -> t'             ::   :: arrow                   {{ com function type }}
    | ( t )               :: S :: paren
    | { t / x } t'        :: M :: tsub

  v :: 'v_' ::=                                         {{ com value }}
    | n                   ::   :: Nat                     {{ com natural number literal }}
    | x |-> t             ::   :: Lam                     {{ com abstraction }}

  num {{ tex \nu }} :: 'num_' ::=                       {{ com numeric type }}
    | N                   ::   :: nat                     {{ com natural number type }}
    | Z                   ::   :: int                     {{ com integer type }}
    | Q                   ::   :: rat                     {{ com rational number type }}

  G {{ tex \Gamma }} :: G_ ::=               {{ com type context }}
    | empty               ::   :: em
    | G , x : T           ::   :: vn

  terminals :: 'terminals_' ::=
    | |->                 ::   :: mapsto     {{ tex \mapsto }}
    | -->                 ::   :: red        {{ tex \longrightarrow }}
    |  ->                 ::   :: arrow      {{ tex \rightarrow }}
    | |-                  ::   :: turnstile  {{ tex \vdash }}
    | in                  ::   :: in         {{ tex \in }}
    | N                   ::   :: nat        {{ tex \mathbb{N} }}
    | Z                   ::   :: int        {{ tex \mathbb{Z} }}
    | Q                   ::   :: rat        {{ tex \mathbb{Q} }}
    | empty               ::   :: em         {{ tex \varnothing }}

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | x : T in G          ::   :: xTG
    | formula1   formula2 ::   :: and        {{ tex [[formula1]] \qquad [[formula2]] }}

parsing
  formula_and left formula_and

subrules
  v <:: t
  num <:: t

freevars
  t x :: fv

substitutions
  single t x :: tsubst

defns
  Jsub :: '' ::=

defn
    T1 <: T2 :: :: sub :: sub_     {{ com [[T1]] is a subtype of [[T2]] }} by

    ------ :: refl
    T <: T

    T1 <: T2   T2 <: T3
    ------------------- :: trans
    T1 <: T3

    ------ :: n_z
    N <: Z

    ------ :: z_q
    Z <: Q

    T1' <: T1    T2 <: T2'
    ---------------------- :: funty
    T1 -> T2 <: T1' -> T2'

defns
  Jtype :: '' ::=

defn
    G |- t : T :: :: type :: ty_    {{ com [[t]] has type [[T]] in context [[G]] }} by

    x:T in G
    -------- :: var
    G |- x:T

    G,x1: T1 |- t : T
    ------------------ :: abs
    G |- x1 |-> t : T1->T

    G |- t : T1->T2    G |- t' : T1
    ------------------------------- :: apply
    G |- t t' : T2

    ---------- :: nat
    G |- n : N

    G |- t1 : num     G |- t2 : num
    -------------------------------- :: add
    G |- t1 + t2 : num

    G |- t1 : num    G |- t2 : num
    ------------------------------- :: mul
    G |- t1 * t2 : num

    G |- t1 : num     G |- t2 : num         Z <: num
    ------------------------------------------------- :: sub
    G |- t1 - t2 : num

    G |- t1 : num      G |- t2 : num       Q <: num
    ----------------------------------------------- :: div
    G |- t1 / t2 : num

    G |- t : num    G |- t' : num
    ----------------------------- :: mul_num
    G |- t t' : num

defns
  Jop :: '' ::=

    defn
    t1 --> t2 ::  :: reduce :: ''       {{ com [[t1]] reduces to [[t2]] }} by


    --------------------------  :: ax_app
    (x |-> t12) v2 -->  {v2/x}t12

    t1 --> t1'
    -------------- :: ctx_app_fun
    t1 t --> t1' t

    t1 --> t1'
    -------------- :: ctx_app_arg
    v t1 --> v t1'
