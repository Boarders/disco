% -*- compile-command: "ott -tex_show_meta false -i simple.ott -o simple.tex && pdflatex simple.tex" -*-

embed
  {{ tex-preamble
\DeclareMathAlphabet{\mathbbold}{U}{bbold}{m}{n}
\usepackage{stmaryrd}
  }}

metavar termvar, x ::=
  {{ tex \mathit{[[termvar]]} }} {{ com  term variable  }}

metavar typevar, X ::=
  {{ tex \mathit{[[typevar]]} }} {{ com  type variable  }}

metavar natural, n ::=
  {{ tex \mathit{[[natural]]} }} {{ com  natural number }}

indexvar k ::=
  {{ com  index }}

grammar
  prog, P :: 'P_' ::=                                   {{ com program }}
    | decl1 .. declk      ::   :: decllist

  decl, D :: 'D_' ::=                                   {{ com declaration }}
    | x : T ;             ::   :: type                    {{ com type }}
    | x = t ;             ::   :: definition              {{ com definition }}

  uop :: 'uop_' ::=                                     {{ com unary operator }}
    | -                   ::   :: neg                     {{ com negation }}

  bop :: 'bop_' ::=                                     {{ com binary operator }}
    | +                   ::   :: add                     {{ com addition }}
    | -                   ::   :: sub                     {{ com subtraction }}
    | *                   ::   :: mul                     {{ com multiplication }}
    | /                   ::   :: div                     {{ com division }}
    | ==                  ::   :: eq                      {{ com equality }}
    | <                   ::   :: lt                      {{ com less than }}
    | &&                  ::   :: and                     {{ com boolean and }}
    | ||                  ::   :: or                      {{ com boolean or }}

  term, t :: 't_' ::=                                   {{ com term }}
    | x                   ::   :: var                     {{ com variable }}
    | ()                  ::   :: unit                    {{ com unit value }}
    | true                ::   :: true                    {{ com true }}
    | false               ::   :: false                   {{ com false }}
    | x |-> t             ::   :: lam  (+ bind x in t +)  {{ com abstraction }}
    | t t'                ::   :: app                     {{ com application }}
    | ( t1 , t2 )         ::   :: pair                    {{ com pair }}
    | inl t1              ::   :: inl                     {{ com left introduction }}
    | inr t2              ::   :: inr                     {{ com right introduction }}
    | n                   ::   :: nat                     {{ com natural literal }}
    | uop t               ::   :: uop                     {{ com unary operator }}
    | t1 bop t2           ::   :: bop                     {{ com binary operator }}
    | let x = t1 in t2    ::   :: let (+ bind x in t1 +)
                                      (+ bind x in t2 +)  {{ com letrec }}
    | case branches       ::   :: case                    {{ com case analysis }}
    | t : T               ::   :: ascribe                 {{ com type ascription }}
    | ( t )               :: S :: paren
    | theta t'            :: M :: tsub
    | 1                   :: M :: One
    | [[ t ]]             :: M :: arith                   {{ com arithmetic }}
    | wrong               ::   :: wrong                   {{ com runtime error }}

  value, v :: 'v_' ::=                                  {{ com value }}
    | n                   ::   :: nat                     {{ com natural number literal }}
    | x |-> t             ::   :: lam                     {{ com abstraction }}
    | ( v1 , v2 )         ::   :: pair                    {{ com pair }}
    | inl v               ::   :: inl                     {{ com left introduction }}
    | inr v               ::   :: inr                     {{ com right introduction }}

  type, T :: 'T_' ::=                                   {{ com type }}
    | X                   ::   :: var                     {{ com variable }}
    | Void                ::   :: void                    {{ com void type }}
    | Unit                ::   :: unit                    {{ com unit type }}
    | Bool                ::   :: bool                    {{ com boolean type }}
    | T1 -> T2            ::   :: arrow                   {{ com function type }}
    | T1 ** T2            ::   :: product                 {{ com product type }}
    | T1 ++ T2            ::   :: sum                     {{ com sum type }}
    | N                   ::   :: nat                     {{ com natural type }}
    | Z                   ::   :: int                     {{ com integer type }}
    | Q                   ::   :: rat                     {{ com rational type }}
%    | forall X : T1 . T2  ::   :: forall                  {{ com forall }}
%    | t1 = t2             ::   :: eq                      {{ com identity }}
    | ( T )               :: S :: paren
    | { T / X } T'        :: M :: tysub

  num {{ tex \nu }} :: 'num_' ::=                       {{ com numeric type }}
    | N                   ::   :: nat                     {{ com natural type }}
    | Z                   ::   :: int                     {{ com integer type }}
    | Q                   ::   :: rat                     {{ com rational type }}

  G {{ tex \Gamma }} :: G_ ::=                          {{ com type context }}
    | empty               ::   :: em                      {{ com empty context }}
    | G , x : T           ::   :: vn                      {{ com cons }}
    | G , G'              :: M :: append                  {{ com append }}

  pattern, p :: 'pat_' ::=                              {{ com pattern }}
    | x                   ::   :: var   (+ binders = x +)     {{ com variable }}
    | _                   ::   :: wild  (+ binders = {} +)    {{ com wildcard }}
    | ()                  ::   :: unit  (+ binders = {} +)    {{ com unit }}
    | true                ::   :: true  (+ binders = {} +)    {{ com true }}
    | false               ::   :: false (+ binders = {} +)    {{ com false }}
    | ( p1 , p2 )         ::   :: pair  (+ binders = binders(p1) union binders(p2) +)
                                                              {{ com pair }}
    | inl p               ::   :: inl   (+ binders = binders(p) +)
                                                              {{ com left }}
    | inr p               ::   :: inr   (+ binders = binders(p) +)
                                                              {{ com right }}
    | n                   ::   :: lit   (+ binders = {} +)    {{ com natural }}
    | S p                 ::   :: succ  (+ binders = binders(p) +)
                                                              {{ com successor }}
    | ( p )               :: S :: paren

  branches, b :: 'branches_' ::=
    | empty                   ::   :: empty
    | { branches              ::   :: skip
    | { term guard branches   ::   :: cons   (+ bind binders(guard) in term +)

  aguard, ag :: 'aguard_' ::=                           {{ com atomic guard }}
    | if t                ::   :: bool  (+ binders = {} +)          {{ com boolean guard }}
    | when t = p          ::   :: pat   (+ binders = binders(p) +)  {{ com pattern guard }}

  guard, g :: 'guard_' ::=                              {{ com guard }}
    | top                 ::   :: top   (+ binders = {} +)    {{ com trivial guard }}
    | ag g                ::   :: cons  (+ binders = binders(ag) union binders(g) +)
                                                              {{ com cons atomic }}

  subst, theta {{ tex \theta }} :: 'subst_' ::=
    | empty               ::   :: empty
    | { t / x } subst     ::   :: cons
    | { t / x }           :: M :: singleton
    | subst1 subst2       :: M :: compose

  terminals :: 'terminals_' ::=
    | |                   ::   :: pipe       {{ tex \mid }}
    | |->                 ::   :: mapsto     {{ tex \mapsto }}
    | -->                 ::   :: red        {{ tex \longrightarrow }}
    | --->                ::   :: yields     {{ tex \rightsquigarrow }}
    |  ->                 ::   :: arrow      {{ tex \rightarrow }}
    | =>                  ::   :: infers     {{ tex \Rightarrow }}
    | <=                  ::   :: checks     {{ tex \Leftarrow }}
    | |-                  ::   :: turnstile  {{ tex \vdash }}
    | |-b                 ::   :: bturnstile {{ tex \vdash_b }}
    | |-g                 ::   :: gturnstile {{ tex \vdash_g }}
    | |-p                 ::   :: pturnstile {{ tex \vdash_p }}
    | ~                   ::   :: sim        {{ tex \sim }}
    | elem                ::   :: elem       {{ tex \in }}
    | Void                ::   :: void       {{ tex \mathbbold{0} }}
    | Unit                ::   :: unit       {{ tex \mathbbold{1} }}
    | Bool                ::   :: bool       {{ tex \mathbb{B} }}
    | **                  ::   :: prod       {{ tex \times }}
    | ++                  ::   :: sum        {{ tex \uplus }}
    | N                   ::   :: nat        {{ tex \mathbb{N} }}
    | Z                   ::   :: int        {{ tex \mathbb{Z} }}
    | Q                   ::   :: rat        {{ tex \mathbb{Q} }}
    | empty               ::   :: em         {{ tex \varnothing }}
    | top                 ::   :: top        {{ tex \top }}
    | forall              ::   :: forall     {{ tex \forall }}
    | !                   ::   :: fail
    | not                 ::   :: not        {{ tex \lnot }}
    | ==                  ::   :: eq         {{ tex \equiv }}
    | &&                  ::   :: and        {{ tex \mathbin{\&\!\&} }}
    | ||                  ::   :: or         {{ tex \mathbin{|\!|} }}
    | [[                  ::   :: llb        {{ tex \llbracket }}
    | ]]                  ::   :: rrb        {{ tex \rrbracket }}
    | \/                  ::   :: lub        {{ tex \sqcup }}

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | x : T elem G        ::   :: xTelemG
    | formula1 .. formulak ::  :: dots
    | not formula         ::   :: not
    | ( formula )         :: S :: parens
    | n >= 1              ::   :: geq

parsing
  uop_neg left t_app    % t1 - t2  should parse as  minus(t1, t2), not app(t1,neg(t2))
  formula_dots left formula_not

subrules
  v <:: t
  num <:: T

freevars
  t x :: fv

substitutions
  single t x :: tsubst

defns
  Jsub :: '' ::=

  defn
    T1 <: T2 :: :: sub :: sub_     {{ com [[T1]] is a subtype of [[T2]] }} by

    ------ :: refl
    T <: T

    T1 <: T2   T2 <: T3
    ------------------- :: trans
    T1 <: T3

    --------- :: ex_falso
    Void <: T

    ------ :: n_z
    N <: Z

    ------ :: z_q
    Z <: Q

    T1' <: T1    T2 <: T2'
    ---------------------- :: funty
    T1 -> T2 <: T1' -> T2'

    T1 <: T1'    T2 <: T2'
    ---------------------- :: prod
    T1 ** T2 <: T1' ** T2'

    T1 <: T1'    T2 <: T2'
    ---------------------- :: sum
    T1 ++ T2 <: T1' ++ T2'

  defn
    T1 = T2 \/ T3 :: :: lub :: lub_    {{ com [[T1]] is the lub of [[T2]] and [[T3]] }} by

    T2 <: T1
    ------------- :: subl
    T1 = T1 \/ T2

    T1 <: T2
    ------------- :: subr
    T2 = T1 \/ T2

    T21 = T22 \/ T23
    ---------------------------------- :: funty
    T1 -> T21 = T1 -> T22 \/ T1 -> T23

    T11 = T12 \/ T13     T21 = T22 \/ T23
    ------------------------------------- :: prod
    T11 ** T21 = T12 ** T22 \/ T13 ** T23

    T11 = T12 \/ T13     T21 = T22 \/ T23
    ------------------------------------- :: sum
    T11 ++ T21 = T12 ++ T22 \/ T13 ++ T23

defns
  Jtype :: '' ::=

  defn
    Finite T :: :: fin :: fin_      {{ com [[T]] is finite }} by

    ------------- :: Void
    Finite Void

    ------------- :: Unit
    Finite Unit

    ------------- :: Bool
    Finite Bool

    Finite T1   Finite T2
    --------------------- :: prod
    Finite T1 ** T2

    Finite T1   Finite T2
    --------------------- :: sum
    Finite T1 ++ T2

    Finite T1   Finite T2
    --------------------- :: funty
    Finite T1 -> T2

  defn
    Decidable T :: :: dec :: dec_   {{ com [[T]] has decidable equality }} by

    -------------- :: Void
    Decidable Void

    -------------- :: Unit
    Decidable Unit

    -------------- :: Bool
    Decidable Bool

    -------------- :: N
    Decidable N

    -------------- :: Z
    Decidable Z

    -------------- :: Q
    Decidable Q

    Decidable T1   Decidable T2
    --------------------------- :: prod
    Decidable T1 ** T2

    Decidable T1   Decidable T2
    --------------------------- :: sum
    Decidable T1 ++ T2

    Finite T1    Decidable T2
    ------------------------- :: funty
    Decidable T1 -> T2

  defn
    G |- t : T :: :: type :: ty_    {{ com [[t]] has type [[T]] in context [[G]] }} by

    x : T elem G
    ------------ :: var
    G |- x : T

    -------------- :: unit
    G |- () : Unit

    ---------------- :: true
    G |- true : Bool

    ----------------- :: false
    G |- false : Bool

    G,x1: T1 |- t : T
    ------------------ :: abs
    G |- x1 |-> t : T1->T

    G |- t : T1->T2    G |- t' : T1
    ------------------------------- :: apply
    G |- t t' : T2

    G |- t1 : T1     G |- t2 : T2
    ----------------------------- :: pair
    G |- ( t1 , t2 ) : T1 ** T2

    G |- t : T1
    --------------------- :: inl
    G |- inl t : T1 ++ T2

    G |- t : T2
    --------------------- :: inr
    G |- inr t : T1 ++ T2

    ---------- :: nat
    G |- n : N

    G |- t1 : num     G |- t2 : num
    -------------------------------- :: add
    G |- t1 + t2 : num

    G |- t1 : num    G |- t2 : num
    ------------------------------- :: mul
    G |- t1 * t2 : num

    G |- t1 : num     G |- t2 : num         Z <: num
    ------------------------------------------------- :: sub
    G |- t1 - t2 : num

    G |- t : num       Z <: num
    ---------------------------- :: neg
    G |- - t : num

    G |- t1 : num      G |- t2 : num       Q <: num
    ----------------------------------------------- :: div
    G |- t1 / t2 : num

    G |- t : num    G |- t' : num
    ----------------------------- :: mul_num
    G |- t t' : num

    G |- t1 : T    G |- t2 : T   Decidable T
    ---------------------------------------- :: eq
    G |- t1 == t2 : Bool

    G |- t1 : num    G |- t2 : num
    ------------------------------ :: lt
    G |- t1 < t2 : Bool

    G |- t1 : Bool    G |- t2 : Bool
    -------------------------------- :: and
    G |- t1 && t2 : Bool

    G |- t1 : Bool    G |- t2 : Bool
    -------------------------------- :: or
    G |- t1 || t2 : Bool

    G |- t1 : T1     G , x : T1 |- t2 : T2
    -------------------------------------- :: let
    G |- let x = t1 in t2 : T2

    G |-b b : T
    --------------- :: case
    G |- case b : T

    G |- t : T
    ---------------- :: ascribe
    G |- (t : T) : T

defn
    G |-b b : T :: :: branches_type :: bty_       {{ com branches [[b]] have type [[T]] in context [[G]] }} by

    --------------- :: empty
    G |-b empty : T

    G |-b branches : T
    -------------------- :: skip
    G |-b { branches : T

    G |-g t , guard : T   G |-b branches : T
    ---------------------------------------- :: cons
    G |-b { t guard branches : T

defn
    G |-g t , g : T :: :: guarded_type :: gty_    {{ com [[t]] guarded by [[g]] has type [[T]] in context [[G]] }} by

    G |- t : T
    ------------------ :: top
    G |-g t , top : T

    G |- t2 : Bool
    G |-g t1 , g : T
    -------------------- :: if
    G |-g t1 , if t2 g : T

    G |-p p : T2 ---> G2      G |- t2 : T2
    G , G2 |-g t1 , g : T
    ----------------------------- :: when
    G |-g t1 , when t2 = p g : T

defn
    G |-p p : T ---> G' :: :: pattern :: 'p_'  {{ com [[p]] has type [[T]] in context [[G]], and produces bindings [[G']] }} by

    ----------------------------- :: var
    G |-p x : T ---> empty, x : T

    -------------------------- :: wild
    G |-p _ : T ---> empty

    ------------------------------ :: unit
    G |-p () : Unit ---> empty

    -------------------------------- :: true
    G |-p true : Bool ---> empty

    --------------------------------- :: false
    G |-p false : Bool ---> empty

    G |-p p1 : T1 ---> G1    G |-p p2 : T2 ---> G2
    ---------------------------------------------- :: pair
    G |-p (p1,p2) : T1 ** T2 ---> G1,G2

    G |-p p : T1 ---> G1
    ------------------------------ :: inl
    G |-p inl p : T1 ++ T2 ---> G1

    G |-p p : T2 ---> G2
    ------------------------------ :: inr
    G |-p inr p : T1 ++ T2 ---> G2

    ------------------------ :: nat
    G |-p n : N ---> empty

    G |-p p : N ---> G'
    ----------------------- :: succ
    G |-p S p : N ---> G'

defns
  Jop :: '' ::=

    defn
    t1 --> t2 ::  :: reduce :: ''       {{ com [[t1]] reduces to [[t2]] }} by

    empty |- v2 : num
    --------------------------  :: beta_num
    (x |-> t12) v2 -->  {v2/x}t12

    not (empty |- t2 : num)
    ---------------------------- :: beta
    (x |-> t12) t2 --> {t2/x}t12

    t1 --> t1'
    -------------- :: cong_app_fun
    t1 t --> t1' t

    empty |- t1 : num   t1 --> t1'
    ------------------------------ :: cong_app_num
    v t1 --> v t1'

    t1 --> t1'
    -------------------- :: cong_fst
    (t1,t2) --> (t1',t2)

    t2 --> t2'
    -------------------- :: cong_snd
    (t1,t2) --> (t1,t2')

    t --> t'
    ---------------- :: cong_inl
    inl t --> inl t'

    t --> t'
    ---------------- :: cong_inr
    inr t --> inr t'

    t1 --> t1'
    ------------------ :: cong_uop
    uop t1 --> uop t1'

    --------------------- :: uop
    uop v --> [[ uop v ]]

    t1 --> t1'
    ------------------------ :: cong_bop_l
    t1 bop t2 --> t1' bop t2

    t2 --> t2'
    ------------------------ :: cong_bop_r
    t1 bop t2 --> t1 bop t2'

    ----------------------------- :: bop
    v1 bop v2 --> [[ v1 bop v2 ]]

    empty |- t1 : num     t1 --> t1'
    -------------------------------------- :: cong_let_num
    let x = t1 in t2 --> let x = t1' in t2

    empty |- v1 : num
    ------------------------------ :: let_num
    let x = v1 in t2 --> {v1/x} t2

    not (empty |- t1 : num)
    ------------------------------ :: let
    let x = t1 in t2 --> {t1/x} t2

    -------------------- :: case_empty
    case empty --> wrong

    --------------------------------- :: case_skip
    case { branches --> case branches

    g --> g'
    -------------------------------------------- :: cong_case
    case { t g branches --> case { t g' branches

    g ---> theta
    ------------------------------- :: case_success
    case { t g branches --> theta t

    g !
    ------------------------------------- :: case_failure
    case { t g branches --> case branches

    defn
    g --> g' ::  :: greduce :: 'gred_'  {{ com guard [[g]] reduces to [[g']] }} by

    t --> t'
    ------------------ :: if
    if t g --> if t' g

    t --> t'
    -------------------------------- :: when
    when t = p g --> when t' = p g

    defn
    guard ---> theta ::  :: success :: 'success_'   {{ com [[guard]] succeeds, producing substitution [[theta]] }} by

    -------------- :: top
    top ---> empty

    g ---> theta
    --------------------- :: true
    if true g ---> theta

    t ~ p ---> theta1
    g ---> theta2
    -------------------------------- :: match
    when t = p g ---> theta2 theta1

    defn
    guard ! ::  :: failure :: 'fail_'   {{ com [[guard]] fails }} by

    ------------ :: false
    if false g !

    not (t ~ p ---> theta)
    ---------------------- :: match
    when t = p g !

    g !
    ---------- :: rest
    aguard g !

    defn
    t ~ p ---> theta ::  :: match :: 'match_'    {{ com term [[t]] matches pattern [[p]], producing substitution [[theta]] }} by

    -------------------- :: var
    t ~ x ---> { t / x }

    -------------------- :: wild
    t ~ _ ---> empty

    ----------------- :: unit
    t ~ () ---> empty

    ---------------------- :: true
    true ~ true ---> empty

    ------------------------ :: false
    false ~ false ---> empty

    t1 ~ p1 ---> theta1     t2 ~ p2 ---> theta2
    ------------------------------------------- :: pair
    (t1, t2) ~ (p1, p2) ---> theta1 theta2

    t ~ p ---> theta
    ------------------------ :: inl
    inl t ~ inl p ---> theta

    t ~ p ---> theta
    ------------------------ :: inr
    inr t ~ inr p ---> theta

    ---------------- :: nat
    n ~ n ---> empty

    n >= 1     (n - 1) ~ p ---> theta
    --------------------------------- :: succ
    n ~ S p ---> theta


defns
  Jalgtype :: '' ::=

  defn
    G |- t => T :: :: infer :: inf_    {{ com [[t]] synthesizes type [[T]] in context [[G]] }} by

    x : T elem G
    ------------ :: var
    G |- x => T

    --------------- :: unit
    G |- () => Unit

    ----------------- :: true
    G |- true => Bool

    ----------------- :: false
    G |- false => Bool

    G |- t => T1 -> T2    G |- t' <= T1
    ----------------------------------- :: apply
    G |- t t' => T2

    G |- t => num1    G |- t' => num2
    num3 = num1 \/ num2
    ----------------------------------- :: mul_num
    G |- t t' => num3

    G |- t1 => T1    G |- t2 => T2
    ------------------------------- :: pair
    G |- (t1, t2) => T1 ** T2

    ----------- :: nat
    G |- n => N

    G |- t1 => num1    G |- t2 => num2
    num3 = num1 \/ num2
    ---------------------------------- :: add
    G |- t1 + t2 => num3

    G |- t1 => num1    G |- t2 => num2
    num3 = num1 \/ num2
    ---------------------------------- :: mul
    G |- t1 * t2 => num3

    G |- t1 => num1    G |- t2 => num2
    num3 = num1 \/ num2    num4 = num3 \/ Z
    ---------------------------------- :: sub
    G |- t1 - t2 => num3

    G |- t => num      num2 = num \/ Z
    ----------------------------------- :: neg
    G |- - t => num2

    G |- t1 <= Q   G |- t2 <= Q
    --------------------------------- :: div
    G |- t1 / t2 => Q

    G |- t1 => T1     G |- t2 => T2
    T3 = T1 \/ T2     Decidable T3
    ---------------------------------- :: eq
    G |- t1 == t2 => Bool

    G |- t1 <= Q   G |- t2 <= Q
    --------------------------------- :: lt
    G |- t1 < t2 => Bool

    G |- t1 <= Bool    G |- t2 <= Bool
    ---------------------------------- :: and
    G |- t1 && t2 => Bool

    G |- t1 <= Bool    G |- t2 <= Bool
    ---------------------------------- :: or
    G |- t1 || t2 => Bool

    G |- t1 => T1   G, x : T1 |- t2 => T2
    ----------------------------------------- :: let
    G |- let x = t1 in t2 => T1

    G |- t <= T
    ----------------- :: ascribe
    G |- (t : T) => T

  defn
    G |- t <= T :: :: check :: chk_    {{ com [[t]] checks at type [[T]] in context [[G]] }} by

    G, x1 : T1 |- t <= T
    ------------------------- :: abs
    G |- x1 |-> t <= T1 -> T

    G |- t <= T1
    ----------------------- :: inl
    G |- inl t <= T1 ++ T2

    G |- t <= T2
    ----------------------- :: inr
    G |- inr t <= T1 ++ T2

    G |- t => T'    T' <: T
    ----------------------- :: flip
    G |- t <= T
