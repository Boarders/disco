This is an annotated bibliography listing some papers and resources
that are particularly relevant to disco.  Copies of many of these
papers are kept in the reference/ subdirectory of the disco
repository.

* FP & discrete math
** CS Report to the CUPM Curriculum Foundations Workshop in Physics and CS
   https://www.cs.swarthmore.edu/~cfk/cupm2.pdf

   Good summary of key concepts that students should see in discrete
   math.  A good source of ideas for disco features and examples.

** Why does mathematical convention deal so ineptly with multisets?

   Math stackexchange question with some good insights and interesting
   responses.  Relevant to disco's planned support for built-in
   multisets.

   https://math.stackexchange.com/questions/152223/why-does-mathematical-convention-deal-so-ineptly-with-multisets

** A Domain-Specific Language for Discrete Mathematics

   Jha, Samuel, Pawar, Kiruthika
* Implementation
** Typing Haskell in Haskell

   Mark Jones

   May be useful as a reference to see how Haskell does certain sorts
   of type inference/checking.
** Practical Type Inference for Arbitrary-Rank Types (2007)

   Simon Peyton Jones, Dimitrios Vytiniotis, Stephanie Weirich, Mark
   Shields

   The stuff about arbitrary-rank types is irrelevant, but this paper
   is useful for its description of practical implementation of type
   inference/checking, and for its discussion of bidirectional
   typechecking.

   This paper builds upon the following paper.
** Local Type Inference (2000)
   This is the paper by Pierce and Turner that Jones et. al build
   upon.  It seems relevant for us in showing how to eschew global
   constraint solving.  Doing everything locally seems like it will
   result in better/easier-to-generate error messages.

* Subtyping
  One of disco's key features is subtyping on its numeric type
  hierarchy:

     Q
    / \
   Z   Q+
    \ /
     N

  as well as all the other subtype relationships induced by this (for
  example, N * Q+ is a subtype of  Z * Q,  Z -> N  is a subtype of  N
  -> Z, and so on).

** TODO Coercion and type inference

   John C. Mitchell
   http://dl.acm.org/citation.cfm?id=800529&dl=ACM&coll=DL&CFID=781024363&CFTOKEN=74865356

   Haven't been able to get a copy of this yet, but this seems to be
   one of the foundational papers on the subject of dealing with
   typechecking with subtyping and implicit coercions.

** Polymorphic Subtype Inference: Closing the Theory-Practice Gap

   You-Chin Fuh, Prateek Mishra

   This is an early paper on type inference for a system with
   subtyping that has a more practical bent (at least more practical
   than Mitchell).  However, it's still rather general and I don't
   think it's going to be all that useful for disco.  Fuh and Mishra's
   other paper is probably much more directly relevant.

** Type Inference with Subtypes (1990)

   You-Chin Fuh, Prateek Mishra

   Another paper on type inference for a system with subtyping by Fuh
   and Mishra.  This one specifically spends some time studying the
   case where the subtyping is always *structural*, that is, all the
   subtype relationships are generated by subtyping relationships
   between primitive types and structural congruence; for example, in
   a structural system, one would never have a subtype relationship
   like  Nat <= T -> Nat.  This is the case for disco which is why
   this is specifically useful.

   The nice thing about a structural subtyping system is that one gets
   to use a variant of a unification algorithm, and the resulting
   constraints are relatively simple.  For disco we have to figure out
   how to combine the usual type inference/checking for polymorphism
   via unification with subtyping: I think the algorithm described in
   this paper will be key.

   Section 6 is of particular relevance for disco; this is the section
   where they describe the algorithm for structural subtyping.
   Section 6.5 even mentions extending the system for polymorphism.

   ...After looking at it more carefully and starting to implement the
   given MATCH algorithm (in explore/sub) I realized this is not quite
   what I thought.  The MATCH algorithm just tests whether a given set
   of constraints is structurally sound, i.e. whether there is some
   substitution which allows the subtype constraints to be directly
   decomposed into a set of atomic constraints. But that doesn't solve
   the problem of needing to then solve the constraints.  They cite a
   paper by Wand which apparently gives a polynomial-time algorithm
   but I haven't been able to get a copy of it yet.  In any case the
   next paper (Traytel et al) seems much more promising.

** Extending Hindley-Milner Type Inference with Coercive Structural Subtyping (2011)

   Dmitriy Traytel, Stefan Berghofer, and Tobias Nipkow

   Note there are two versions stored in reference/ : a shorter
   version that was published in APLAS '11, and an extended version
   with more detail.

   At first glance this seems like exactly what we want.  It even
   discusses an extension to include type classes in section 4.

   Note they also cite Wand; should really get a copy of that.

   - Going to try implementing this in explore/sub2.

   - In disco at the moment we don't absolutely *need* to do coercion
     insertion (Figure 3 in the paper, which is the final step): base
     types in a subtype relationship always correspond to an actual
     subset relationship and no conversion needs to be done, given how
     the interpreter simply represents all numeric types with rational
     values.  However, it seems easy enough, and would probably be
     useful in later settings---for example if we wanted to compile
     disco and represent natural numbers as register-sized integers
     when possible, or if we wanted to move to a typed, fully
     annotated core language that can be easily typechecked.

** TODO On the complexity of type inference with coercion (1989)

   Wand, M., O’Keefe, P.: On the complexity of type inference with
   coercion.  In: FPCA ’89: Functional programming languages and
   computer architecture. pp. 293–298. ACM, New York, NY, USA (1989)

** TODO Type inference with structural subtyping: A faithful formalization of an efficient constraint solver (2003)
   Vincent Simonet (APLAS 2003)

   Should skim over this and take notes.
* Type constraints

  Disco will have a system of type constraints, e.g. num T means type
  T is numeric, sub T means T supports negative numbers/subtraction,
  frac T means T supports fractions/division, finite T means T is
  finite, and so on.

** How to make ad-hoc polymorphism less ad hoc (1988)

   Philip Wadler and Stephen Blott

   This is the original paper on type classes, i.e. constraints on
   types with "evidence" (i.e. dictionaries) which is implicitly
   filled in as part of the type checking/desugaring process.

   This paper may be useful as a point of reference/comparison, but
   the system presented in this paper is quite a bit more complicated
   than what is needed for disco, since (a) disco will have only a
   built-in set of type constraints, without the ability for disco
   users to declare new type classes/constraints, and (b) because of
   this we can also get away without filling in evidence: it's enough
   just to remember the type at which each overloaded operation
   typechecked, in order to select the right semantics at desugar- or
   runtime.
** A theory of qualified types (1992)

   Mark Jones

   Useful general framework for thinking about/dealing with qualified,
   i.e. constrained, types.
** TODO Type reconstruction for type classes (1993)

   Tobias Nipkow and Christian Prehofer

   Traytel et al. reference this paper when mentioning (in section 4)
   that handling type classes / qualified types requires a unification
   algorithm that can correctly handle type variables annotated with
   sorts (sort = intersection of finitely many type classes).
