take : ℕ → List Q → List Q
take 0 _  = []
take _ [] = []
take (S n') (x :: xs) = x :: take n' xs

repeat : Q → List Q
repeat x = x :: repeat x

downfrom : N -> List N
downfrom 0     = []
downfrom (S n) = (n+1) :: downfrom n

even : N -> Bool
even 0     = true
even (S n) = not (even n)